{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/felipecorredor/Documents/react-advanced/next-project/pages/users/[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRouter } from \"next/router\";\n\nvar User = function User(_ref) {\n  _s();\n\n  var user = _ref.user;\n  var router = useRouter();\n  var id = router.query.id;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(User, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = User;\nexport var __N_SSG = true;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/felipecorredor/Documents/react-advanced/next-project/pages/users/[id].js"],"names":["React","useRouter","User","user","router","id","query","name"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAEzB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AAFyB,MAGjBI,EAHiB,GAGVD,MAAM,CAACE,KAHG,CAGjBD,EAHiB;AAKzB,sBACE;AAAA,2BACE;AAAA,gBAAKF,IAAI,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAVD;;GAAML,I;UAEWD,S;;;KAFXC,I;;AAoCN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport { useRouter } from \"next/router\";\n\nconst User = ({ user }) => {\n\n  const router = useRouter()\n  const { id } = router.query;\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n    </div>\n  )\n}\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://jsonplaceholder.typicode.com/users')\n  const users = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = users.map((user) => ({\n    params: { id: user.show.id.toString() },\n  }))\n\n  return { paths, fallback: false }\n}\n\n\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://jsonplaceholder.typicode.com/users/${params.id}`)\n  const user = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { user } }\n}\n\nexport default User"]},"metadata":{},"sourceType":"module"}